services:
  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: playwright-service-postgres
    environment:
      POSTGRES_DB: playwrightservice
      POSTGRES_USER: playwright_user
      POSTGRES_PASSWORD: playwright_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    networks:
      - playwright-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U playwright_user -d playwrightservice"]
      interval: 5s
      timeout: 5s
      retries: 5

  # Backend API (Node.js) - Current
  backend-node:
    build:
      context: ./backend-node
      dockerfile: Dockerfile.dev
    container_name: playwright-service-backend-node
    env_file:
      - .env
    environment:
      - NODE_ENV=development
      - PORT=3001
      - DATABASE_URL=postgresql://playwright_user:playwright_password@postgres:5432/playwrightservice
      - FRONTEND_URL=http://localhost:3000
      - PRISMA_QUERY_ENGINE_LIBRARY=/app/node_modules/.prisma/client/libquery_engine-linux-musl-openssl-3.0.x.so.node
    ports:
      - "3001:3001"
    volumes:
      - ./backend-node:/app
      - /app/node_modules
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - playwright-network
    restart: unless-stopped
    command: sh -c "yarn db:push --accept-data-loss && yarn db:seed && yarn dev"

  # Frontend (React + Vite)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    container_name: playwright-service-frontend
    environment:
      - VITE_API_URL=http://localhost:3001
      - VITE_API_BASE_URL=http://localhost:3001/api
    ports:
      - "3000:5173"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    depends_on:
      - backend-node
    networks:
      - playwright-network
    restart: unless-stopped
    command: yarn dev --host 0.0.0.0

  # Redis for Job Queue
  redis:
    image: redis:7-alpine
    container_name: playwright-service-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - playwright-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5

  # Test Runner Service
  test-runner:
    build:
      context: .
      dockerfile: test-runner/Dockerfile.dev
    container_name: playwright-service-test-runner
    env_file:
      - .env
    environment:
      - NODE_ENV=development
      - PORT=3002
      - WEBSOCKET_PORT=3003
      - DATABASE_URL=postgresql://playwright_user:playwright_password@postgres:5432/playwrightservice
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - API_URL=http://backend-node:3001
      - FRONTEND_URL=http://localhost:3000
      - PRISMA_QUERY_ENGINE_LIBRARY=/app/node_modules/.prisma/client/libquery_engine-linux-musl-openssl-3.0.x.so.node
    ports:
      - "3002:3002"
      - "3003:3003"
    volumes:
      - ./test-runner:/app
      - /app/node_modules
      - /tmp:/tmp
    depends_on:
      backend-node:
        condition: service_started
      redis:
        condition: service_healthy
    networks:
      - playwright-network
    restart: unless-stopped
    command: sh -c "yarn db:generate && yarn dev"

  # pgAdmin for Database Management (Optional)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: playwright-service-pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@playwrightservice.com
      PGADMIN_DEFAULT_PASSWORD: admin123
    ports:
      - "8080:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      - postgres
    networks:
      - playwright-network
    restart: unless-stopped
    profiles:
      - tools

volumes:
  postgres_data:
  redis_data:
  pgadmin_data:

networks:
  playwright-network:
    driver: bridge
