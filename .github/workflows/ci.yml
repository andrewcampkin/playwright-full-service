name: CI/CD Pipeline

on:
  push:
    branches: [ main ]

env:
  AWS_REGION: us-east-1
  ECR_REGISTRY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com

jobs:
  build-and-push:
    name: Build and Push Images
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Set environment
      run: |
        echo "ENVIRONMENT=prod" >> $GITHUB_ENV
        echo "IMAGE_TAG=latest" >> $GITHUB_ENV

    # Build and push backend image
    - name: Build backend image
      working-directory: ./backend-node
      run: |
        docker build -t $ECR_REGISTRY/playwright-service-$ENVIRONMENT-backend:$IMAGE_TAG .
        docker tag $ECR_REGISTRY/playwright-service-$ENVIRONMENT-backend:$IMAGE_TAG $ECR_REGISTRY/playwright-service-$ENVIRONMENT-backend:latest

    - name: Push backend image
      run: |
        docker push $ECR_REGISTRY/playwright-service-$ENVIRONMENT-backend:$IMAGE_TAG
        docker push $ECR_REGISTRY/playwright-service-$ENVIRONMENT-backend:latest

    # Build and push test-runner image
    - name: Build test-runner image
      working-directory: ./test-runner
      run: |
        docker build -t $ECR_REGISTRY/playwright-service-$ENVIRONMENT-test-runner:$IMAGE_TAG .
        docker tag $ECR_REGISTRY/playwright-service-$ENVIRONMENT-test-runner:$IMAGE_TAG $ECR_REGISTRY/playwright-service-$ENVIRONMENT-test-runner:latest

    - name: Push test-runner image
      run: |
        docker push $ECR_REGISTRY/playwright-service-$ENVIRONMENT-test-runner:$IMAGE_TAG
        docker push $ECR_REGISTRY/playwright-service-$ENVIRONMENT-test-runner:latest

  deploy-infrastructure:
    name: Deploy Infrastructure
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.6.0

    - name: Set environment
      run: |
        echo "ENVIRONMENT=prod" >> $GITHUB_ENV

    - name: Terraform Init
      working-directory: ./deployment/terraform
      run: |
        terraform init \
          -backend-config="bucket=${{ secrets.TERRAFORM_STATE_BUCKET }}" \
          -backend-config="key=playwright-service/$ENVIRONMENT/terraform.tfstate" \
          -backend-config="region=${{ env.AWS_REGION }}"

    - name: Terraform Plan
      working-directory: ./deployment/terraform
      run: |
        terraform plan \
          -var="environment=$ENVIRONMENT" \
          -var="domain_name=${{ secrets.DOMAIN_NAME }}" \
          -var="certificate_arn=${{ secrets.CERTIFICATE_ARN }}" \
          -out=tfplan

    - name: Terraform Apply
      working-directory: ./deployment/terraform
      run: terraform apply -auto-approve tfplan

  deploy-frontend:
    name: Deploy Frontend
    runs-on: ubuntu-latest
    needs: [deploy-infrastructure]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'yarn'

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Set environment
      run: |
        echo "ENVIRONMENT=prod" >> $GITHUB_ENV
        echo "API_URL=https://api.playwrightservice.com" >> $GITHUB_ENV

    - name: Install frontend dependencies
      working-directory: ./frontend
      run: yarn install --frozen-lockfile

    - name: Build frontend
      working-directory: ./frontend
      env:
        VITE_API_URL: ${{ env.API_URL }}
        VITE_API_BASE_URL: ${{ env.API_URL }}/api
      run: yarn build

    - name: Deploy to S3
      run: |
        aws s3 sync ./frontend/dist/ s3://playwright-service-$ENVIRONMENT-frontend-$(aws sts get-caller-identity --query Account --output text) --delete

    - name: Invalidate CloudFront
      run: |
        DISTRIBUTION_ID=$(aws cloudfront list-distributions --query "DistributionList.Items[?Comment=='playwright-service-$ENVIRONMENT-frontend'].Id" --output text)
        aws cloudfront create-invalidation --distribution-id $DISTRIBUTION_ID --paths "/*"

  deploy-services:
    name: Deploy Services
    runs-on: ubuntu-latest
    needs: [deploy-infrastructure]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Set environment
      run: |
        echo "ENVIRONMENT=prod" >> $GITHUB_ENV

    - name: Update ECS services
      run: |
        # Update backend service
        aws ecs update-service \
          --cluster playwright-service-$ENVIRONMENT-cluster \
          --service playwright-service-$ENVIRONMENT-backend \
          --force-new-deployment

        # Update test-runner service
        aws ecs update-service \
          --cluster playwright-service-$ENVIRONMENT-cluster \
          --service playwright-service-$ENVIRONMENT-test-runner \
          --force-new-deployment

    - name: Wait for deployment
      run: |
        aws ecs wait services-stable \
          --cluster playwright-service-$ENVIRONMENT-cluster \
          --services playwright-service-$ENVIRONMENT-backend playwright-service-$ENVIRONMENT-test-runner
